minio
*****
minio is a simple mini-library of common posix io operations that 
either aren't exposed as a single function call by the posix API, 
or are but require some amount of configuration via flags and 
reading-the-manual-to-make-sure-you've-remembered-it-right.
many of these operations (like popen3, mkpath), are widely provided 
and behave as expected.  some (simplex, duplex, redirect) are just 
wrappers around common posix functions (pipe, socketpair, dup2) with
slightly different argument signatures, and more self-explanatory
names.

in a few situations, sets of posix functions similar behaviour have 
been unified into a single function call.  open2()ing a 
local-stream-socket file connects to it as a client.   gets()ing 
from a directory returns the next filename from the directory, like 
readdir.  accept()ing a connection to a socket server is treated as 
the same as take()ing a file descriptor that was give()en over a local 
socket.

minio contains some super-posix functionality for tty io, like the
ioctl to get the screensize of a tty, and functions to the work
with common tty escape codes for both input and output.


building
******** 
 [todo]


installing
**********
 [todo]


threadsafety
************
while linux,freebsd,netbsd,openbsd (and probably others) support
a number of compatible extensions to many common posix syscalls
(SOCK_CLOEXEC is the main example), minio doesn't rely on these
yet.  consequently, any file-descriptor creating functions it 
like minio's take(), redirect(), duplex(), simplex(), and filter() 
are not thread-exec safe or thread-fork-exec safe.  this is a pity,
since minio provides three fork-exec functions, filter(), launch(), 
and popen3(), but it how it is for now.

minio provides a special mechanism for changing and accessing the 
process's current-working-directory, via the "file-descriptor" -1.

these functions are not protected by locks, and should not be used
with the fd=-1 by more than one thread at a time.  doing so will 
result in corruption and undefined behaviour.

fd=-1 invocations of these functions should not be mixed with calls 
to the posix chdir() or posix fchdir() functions.  doing so will 
result in corruption and undefined behaviour.


modules
*******
minio is divided loosely into 5 modules.  these are not namespaced, 
but any that would clash with an existing posix function call have 
a '2' appended to their name to distinguish them.  all functions 
operate on posix file-descriptors and/or pre-allocated buffers, 
and are designed to be useful when used with functions from other 
modules as much as functions from their own.  for example, all 
modules will require at least one function from the file-descriptor 
module to be of any practical use.  

all minio functions that operate on posix file descriptors can be
freely mixed with calls to standard posix file descriptor functions, 
or os-specific file descriptor functions.  since minio provides no
version of posix poll(), linux epoll(), or BSD kqueue(), relying on
posix or os-specific funtions is often nessesary.


filesystem module
-----------------
open2(), mkpath(), mkserver(), filename(), delete(),
cd(), cdup()


networking module
-----------------
tcp4(), tcp6(), dial()


subprocess module
-----------------
popen3(), launch(), filter()


file descriptor module
----------------------
canread(), canwrite(), waitread(), waitwrite(), isonline()
print(), printva(), puts2(), write2(), read2(), gets2(), seek(), tell() 
simplex(), duplex(), give(), take(), redirect(), close2(),
blocking(),nonblocking(),cloexec(),noncloexec(),getflags(),setflags()
crash()


terminal module
---------------
charmode(), linemode(), 
input(), size(), quit(),
cls(), locate(), normal(), 
palette(), websafe(), greyscale(), color(),
bold(), italics(), underline(),
ischaracter(), isctrl(), isalt(), isctrlalt(), isarrow(),
isup(), isdown(), isleft(), isright(),
isescape(), isbackspace(), isenter(), istab(),
character()


documentation
*************
unlike posix, all minio functions set errno=0 on success.


  int open2(char*path, int mode, int perm);

this is a generic open function that works with both 
local-stream-socket files, regular storage files, directories,
fifos, and devices.  returns the fd to the opened file on success,
-1 on error.


  int mkpath(char*path, int perm);

this is a generic directory-creator function that creates paths of 
directories in one call.  returns 0 if the entire path was created,
-1 if the path could not be created (because it already existed, 
the path was invalid, the disk was full, or permissions forbid 
creating new files in one of the path direcotries).


  int mkserver(char*path, int flags);

creates a listening local-stream-socket file.  returns the 
listening fd on success, -1 on error.  the local-server can
be connected to via minio's open2() function, or the posix
connect(2) function.


  size_t filename(int fd, char*buffer, size_t length);

attempts to determine the name of the file described by @fd.
if the name can be determined, it is written to @buffer.
currently only works for directory-fds.  may fail, depending
on permissions of parent directory.  returns the number of
bytes written to @buffer on sucess, 0 on failure.


  int delete(char*path);

this is a generic delete function, that deletes files, empty
directories, and populated directories, in one function call.
the directory must *not* contain any hardlink cycles.  returns
0 on sucess, -1 on failure.


  int cd(int fd, char*path, int flags);

changes the directory of a file descriptor.  flags can be any 
of 0, O_CLOEXEC, or O_NOFOLLOW (which will prevent cd() from 
entering a soft-linked directory).

use -1 as the fd to cd the current-working-directory.
this function must be used to change the cwd in order for 
seek,tell,gets2,cdup to function correctly when accessing
the current-working-directory.  do not use posix chdir()
or posix fchdir().

returns 0 on success, -1 on failure.


  int cdup(int fd, int flags);

cd's to the parent of the file descriptor directory, and
repositions the fd's read-head to be at the entry after 
the directory that has just been exited.  flags can be
either 0 or O_CLOEXEC.

use -1 as the fd to cdup the current-working-directory.  
returns 0 on success, -1 on failure.


  int tcp4(short port, int flags);

creates a tcp/ipv4 server listening on @port.  returns fd
of listening server.  client connections can be taken either
by posix's accept(2), or by minio's take().  return -1 on
failure.  flags can be used to set O_NONBLOCK and O_CLOEXEC.


  int tcp6(short port, int flags);

creates a tcp/ipv6 server listening on @port.  returns fd
of listening server.  client connections can be taken either
by posix's accept(2), or by minio's take().  return -1 on
failure.  flags can be used to set O_NONBLOCK and O_CLOEXEC.


  int dial(char*hostname, int port, int flags);

connects to a tcp ipv4 or ipv6 server on @hostname:@port.
flags can be used to set O_NONBLOCK and O_CLOEXEC.  returns
fd of tcp connection to server on success, -1 on failure. 


  int popen3(char*command, int stdin,int stdout,int stderr, pid_t*pid);

[todo]


  int launch(char*command, pid_t*pid);

[todo]


  int filter(int pull, char*command, int push, pid_t*pid);

[todo]


  int canread(int fd); 

returns true if there is data available to be read from @fd, 
false if there is not.


  int canwrite(int fd);

returns true if there is space for data to be written to @fd, 
false if there is not.


  int waitread(int fd); 

pauses until data becomes available to be read from @fd, or 
timelimit has run out.


  int waitwrite(int fd); 

pauses until space becomes available to write data to @fd, or 
timelimit has run out.


  int isonline(int fd);

returns true if @fd has not been hung-up on, or experienced
any other kind of connection error.  returns false otherwise.


  int print(int fd, char*format, ...); 

[todo]


  int printva(int fd, char*format, va_list*args);

[todo]


  size_t write2(int fd, char*buffer, size_t length); 

generic fd buffer-writer function.  if fd is a socket, pipe,
or regular file, perfoms a posix write until either the buffer
has been written, or an error condition interrupts the 
operation.  returns the number of characters written from the
buffer.  sets errno to the error condition that caused the
operation to halt, or to 0 if the entire operation completed
successfully.


  size_t puts2(int fd, char*string); 

generic fd string-writer function.  if fd is a socket, pipe,
or regular file, performs a blocking write until the buffer 
has been written to the file descriptor.  returns the number 
of characters written from the buffer.  sets errno to the 
error condition that caused the operation to halt, or to 0 
if the entire operation completed successfully.


  size_t read2(int fd, char*buffer, size_t length); 

generic fd buffer-reader function.  if fd is a socket, pipe,
or regular file, perfoms a posix read until either the buffer
has been filled, or an error condition interrupts the 
operation.  returns the number of characters written to the
buffer.  sets errno to the error condition that caused the
operation to halt, or to 0 if the entire operation completed
successfully.  an end-of-file is indicated by returning 0
bytes, with an errno of 0.


  size_t gets2(int fd, char*buffer, size_t length); 

generic fd string-reader function.  if fd is a socket, pipe,
or regular file, performs a blocking read until either the 
buffer has been filled, or a \n or \0 is encountered.  if the
fd is a directory, reads the filename of the next file in the
directory and writes the filename to the buffer, truncating
if nessesary.  null terminates the buffer before returning.  
returns the number of characters written to the buffer.  sets
errno to the error condition that caused the operation to 
halt, or to 0 if the entire operation completed successfully.
an end-of-file is indicated by returning 0 bytes, with
an errno of 0.

to gets2() the next entry of the current-working-directory, 
pass -1 as the fd.


  int seek(int fd, off_t offset);

repositions the read-write head of an fd to a new location
in the file.  if the file is a storage file, any byte offset
can be used.  if the file is a directory file, only 0 or 
values returned by tell() on the same file descriptor should 
be passed as offsets.

to seek the read head of the current-working-directory, pass
-1 as the fd.

returns 0 on success, -1 on error.


  off_t tell(int fd);

reports the position the read-write head of an fd in terms of
the number of bytes since the start of the file.  
to get the positon of the read head of the current-working-directory, 
pass -1 as the fd.

returns the byte offset of the read-head on success, -1 on error.


  int simplex(int fd[2], int flags);

creates a simplex (one-way) pipe.  the file descriptor to the
read-end of the pipe is written to @fd[0] (r comes before w in the
alphabet), the file descriptor to the write-end of the pipe is
written to @fd[1] (w comes after r in the alphabet).  flags can be
0 or O_CLOEXEC or O_NONBLOCK.  returns 0 on success, -1 on failure.
simplex() creates a posix pipe, and posix fstat() will report @fd[0] 
and @fd[1] as S_FIFO.

file descriptors cannot be give()en or take()en over simplex pipes.


  int duplex(int fd[2], int flags);

creates a duplex (two-way) pipe.  the file descriptors to each end
of the pipe are written to @fd[0] and @fd[1].  flags can be
0 or O_CLOEXEC or O_NONBLOCK.  returns 0 on success, -1 on failure.
duplex() creates a pair of posix local-sockets.  posix fstat() will 
report @fd[0] and @fd[1] as S_SOCK.

file descriptors can be give()en or take()en over duplex pipes.


  int give(int fd, int payload);

sends a file descriptor @payload over a local socket @fd.
on success, the @payload fd will no longer exist in the
calling process.  returns 0 on sucess, -1 on failure.


  int take(int fd, int flags);

receives a file descriptor sent over a local socket, or
accepts a file descriptor connection to a server socket.
the new file descriptor's O_NONBLOCK and O_CLOEXEC flags
are set to the value of the @flags argument.  returns the 
new file descriptor on success, -1 on failure.


  int redirect(int fd, int target); 
  int close2(int fd);
  int blocking(int fd);
  int nonblocking(int fd);
  int cloexec(int fd);
  int noncloexec(int fd);
  int getflags(int fd);
  int setflags(int fd, int flags);
  int crash(int fd, char*message, ...);


  charmode(int fd);

sets the terminal opened on @fd into character-by-character
mode (sometimes called non-cannonical mode or raw mode).
returns 0 on success, -1 on failure.

use this function to turn on key-by-key input parsing for
an interactive terminal application.


  linemode(int fd);
 
sets the terminal opened on @fd into line-by-line mode 
(sometimes called cannonical mode or cooked mode).
returns 0 on success, -1 on failure.

use this function to turn off key-by-key input parsing
before exit()ing an interactive terminal application.


  input(int fd, char buf[8]);
  size(int fd, int*x,int*y);
  quit(int code);

  cls(int fd);
  locate(int fd, int x, int y);
  normal(int fd);
  
  palette(int fd, int fg, int bg);
  websafe(int fd, int fg, int bg);
  greyscale(int fd, int fg, int bg);
  color(int fd, int fg, int bg);
  
  bold(int fd);
  italics(int fd);
  underline(int fd);
  
  ischaracter(char buf[8]);
  isctrl(char buf[8]);
  isalt(char buf[8]);
  isctrlalt(char buf[8]);
  isarrow(char buf[8]);
  
  isup(char buf[8]);
  isdown(char buf[8]);
  isleft(char buf[8]);
  isright(char buf[8]);
  
  isescape(char buf[8]);
  isbackspace(char buf[8]);
  isenter(char buf[8]);
  istab(char buf[8]);

  character(char buf[8]);


patterns
********

 int newfile(char*file,int flags,int perm);
 {
   int err;
   err = mkpath(file);
   if(err==0)
      rmdir(file);

   return open(file,flags|O_CREAT,perm);
 }
 int fd;
 fd = newfile("/new/path/to/new/file",O_RDWR,0666);


 int pipeline[2]; 
 filter(pipeline[0],"...",-1,NULL);
 filter(pipeline[0],"...",-1,NULL);
 filter(pipeline[0],"...",-1,NULL);


 void join(int lhs,int rhs)
 {
   int upr,upw;
   upr=dup(lhs);
   upw=dup(rhs);

   filter(upr,"cat -",upw,NULL);

   int dnr,dnw;
   dnr=dup(lhs);
   dnw=dup(rhs);

   filter(dwr,"cat -",dnw,NULL);

   close2(lhs);
   close2(rhs);
 } 
 void split(int fd, int channels[2])
 {
   int pull[2];
   simplex(pull,0);

   int push[2];
   simplex(push,0);

   int upr;
   upr = dup(fd);
   filter(upr,"cat -",pull[1],NULL);

   int upw;
   upw = dup(fd);
   filter(push[0],"cat -",upw,NULL);

   channels[0] = pull[0];
   channels[1] = push[1];

   close2(fd); 
 } 
 void stream(int lhs, int rhs)
 {
   int dst;
   dst = dup(rhs);

   off_t cache;
   cache = tell(rhs);

   pid_t pid;
   filter(lhs,"cat -",dst,&pid); 
   waitpid(pid,NULL,0);

   seek(rhs,cache);
 }


tutorial
******** 
todo: make a tty markdown renderer utility (pushable to 
      stdout via filter())
      make a tty-choose commandline utility, that pushes the
      markdown renderer over its stdout 
todo: make a minimal ls clone, to demonstrait directory reading
      make a filesize() function, that calculates the size 
      of directories contents
      - a breadth first recursive function
      - a depth first stack-counter function


testing
*******
linux 3.16.0 gcc 4.8.4   eglibc 2.9........pass
freebsd 10.2 clang 3.4.1 libc x.x.x........fail


issues
******
- gets2 does not advance to the next directory entry after reading in 
  FreeBSD, due to FreeBSD not recognising directory seek offsets once
  closedir() has been called.
  - workarounds:
    - do it slowly 
      - check the offset of the fd, 0 = 0th entry, 1 = 1st entry, etc
      - manually scan through the N entries until we reach the requested
        entry number.
      - this requires FreeBSD to keep the same directory entry ordering
        between calls to closedir() and opendir().
    - do it thouroughly
      - maintain a (lock protected) cache of DIR* and dev:ino values.
        every attempt to gets2() from a directory fd looksup this cache,
        and opendir()s it if nessesary.  if the dev:ino does not match,
        it is replaced.
      - this requires all fd closing to be done with minio's close2() for
        absolute safety.
- FreeBSD-xterm erroniously parses alt+char,alt+shift+char in its default
  configuration.  parses correctly when set to 'meta-sends-escape'.  what
  is different about FreeBSDs default xterm configuration and Ubuntu's?
  - FreeBSD xfce4-terminal parses input correctly,
  - FreeBSD uxterm correctly parses alt+char,alt+shift+char,ctrl+alt+char
  - FreeBSD console ignores the alt in alt+char, alt+shift+char,ctrl+alt+char
    keypresses but otherwise parses correctly,


future work
***********
- introduce #ifdef'd support for SOCK_CLOEXEC (covers all major OSs bar OSX)
- introduce #ifdef'd support for OSX's version of SOCK_CLOEXEC, that applies
  to all sockets created by an existing socket.
- introduce #ifdef'd support for linux's dup3() (check for BSD,OSX equivalents)
- introduce posix ____at() style filesystem functions (this will require 
  mocking up a connectat() and bindat() pair of functions)
- introduce a broadcast() function for writing the same string to a batch of
  file descriptors
- consider introducing insert2()/remove2() and inserts()/removes() functions 
  for inserting and removing text from a file, without overwriting or leaving 
  blank regions
  (remove() is a C89 function for delete/unlink, this might be confusing)
- consider replacing read2/readall and write2/writeall with a read and write
  call that emulate the MSG_NOWAIT|MSG_WAITALL, and (possibly) always attempt
  to perform MSG_NOSIGNAL like behaviour.
  - on OSX this can be done with per-thread pthread signal blocking
  - on linux this will have to be done by a syscall() to avoid linking with
    the pthread library
  - on FreeBSD|etc this may require the same approach as linux
- introduce join,split,fuse,wrap,tee,tap,syphon,stream file-descriptor routing 
  operations
- extend filename() to avail of the /proc/self/fd directory if it exists

- consider introducing a tmpfile function, that creates a randomly named
  file (without the user having to pass a mutable template string), or an
  unlinked file (for use as a growable buffer/shared memory)
- consider introducing attach()/detatch() wrappers around mmap, following the
  shmio approach.  no need for shmgive/shmtake/shmshare-- those can be done
  via passing the file-descriptors

- consider introducing a markdown function, for performing markdown based
  tty colour/typeface formatting.  should follow the print()/printva format.
  leading whitespace should be preserved.  possibly with an snmarkdown
  print-to-string variant as well.  it might be feasible to not filter the
  markdown symbols, just highlight them, like less does.  this would make the
  output meaningful if shell-redirected to a file.  it would also make it
  easier to centre/justify/leftalign/rightalign markdown highlighted text.  
  maybe it should either colour (if isatty(fd)), else print the symbols.
- consider introducing a centre function, for automatically getting the tty
  width, and centring text.  should be 'aware' enough of tty control characters
  to not count them as taking up space (thus making it compatible with an 
  snmarkdown print-to-string function).  possibly should be markdown.  if the
  fd is not a tty, should default to centring on 80 characters, or accept a
  user specified width, where 0=>default=>80.  tabs have to be translated to 
  spaces.  center should not split words unless the word is longer than a
  line.
- consider introducing a justify function, for automatically getting the tty
  width, and justifying text.  should be 'aware' enough of tty control characters
  to not count them as taking up space (thus making it compatible with an 
  snmarkdown print-to-string function).  possibly should be markdown.  if the
  fd is not a tty, should default to centring on 80 characters, or accept a
  user specified width, where 0=>default=>80.  tabs have to be translated to 
  spaces.  justify should not split words unless the word is longer than a line.
- consider introducing a leftalign function, for automatically getting the tty
  width, and leftaligning text.  should be 'aware' enough of tty control characters
  to not count them as taking up space (thus making it compatible with an 
  snmarkdown print-to-string function).  possibly should be markdown.  if the
  fd is not a tty, should default to centring on 80 characters, or accept a
  user specified width, where 0=>default=>80.  tabs have to be translated to 
  spaces.    leftalign should not split words unless the word is longer than a 
  line.
- consider introducing a rightalign function, for automatically getting the tty
  width, and rightaligning text.  should be 'aware' enough of tty control characters
  to not count them as taking up space (thus making it compatible with an 
  snmarkdown print-to-string function).  possibly should be markdown.  if the
  fd is not a tty, should default to centring on 80 characters, or accept a
  user specified width, where 0=>default=>80.  tabs have to be translated to 
  spaces.  rightalign should not split words unless the word is longer than a 
  line.
- consider introducing stdio-based mutex locks, and using them to protect
  operations on the -1 file descriptor, as well as publically exposing them.
- consider introducing pthread|syscall wrapping functions for getting an opaque
  object that is unique for each thread, which could be useful for functions
  that need to know if they're being called from a different thread then the
  last time.
- consider introducing a corecount() function, and a function to fork N 
  subprocesses, so one-subprocess-per-core can be created.
- consider introducing an isdir(int fd) function, that tests the type of open 
  fd.  not nessesary to introduce functions for testing the various forms of
  non-directory fds.

